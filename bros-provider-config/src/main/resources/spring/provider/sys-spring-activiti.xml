<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

<!-- c3p0连接池配置 -->  
     <bean id="activitiDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >  
          <property name="driverClass" value="${sys.jdbc.activiti.driverClassName}"/>  
          <property name="jdbcUrl" value="${sys.bros.activiti.jdbc.url}"/>  
          <!-- 用户名-->  
          <property name="user" value="${sys.bros.activiti.jdbc.username}"/>  
          <!-- 用户密码-->  
          <property name="password" value="${sys.bros.activiti.jdbc.password}"/>
          <!--连接池中保留的最大连接数。默认值: 15 -->   
          <property name="maxPoolSize" value="20"/>  
          <!-- 连接池中保留的最小连接数，默认为：3-->  
          <property name="minPoolSize" value="2"/>  
          <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->  
          <property name="initialPoolSize" value="2"/>  
          <!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->   
          <property name="maxIdleTime" value="60"/>             
          <!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->   
          <property name="checkoutTimeout" value="3000"/>              
          <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->   
          <property name="acquireIncrement" value="2"/>    
         <!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->   
          <property name="acquireRetryAttempts" value="0"/>    
          <!--重新尝试的时间间隔，默认为：1000毫秒-->   
          <property name="acquireRetryDelay" value="1000" />  
          <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->   
          <property name="autoCommitOnClose" value="false"/>  
          <!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null -->   
<!--           <property name="automaticTestTable" value="Test"/>   -->
          <property name="preferredTestQuery" value="select 'Jack Test' as txt"/>  
          <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->   
          <property name="breakAfterAcquireFailure" value="false"/>  
          <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->   
          <property name="idleConnectionTestPeriod" value="60"/>  
          <!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->   
          <property name="maxStatements" value="100"/>  
          <!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->   
          <property name="maxStatementsPerConnection" value="0"/>  
     </bean>
	 
	<!-- 将数据源映射到sqlSessionFactory中 -->
	<bean id="activitiSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="${sys.bros.provider.mybatis.path}" />
		<property name="dataSource" ref="activitiDataSource" />
	</bean>

	<!-- SqlSession模板类实例 -->
	<bean id="activitiSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="close">
		<constructor-arg index="0" ref="activitiSqlSessionFactory" />
	</bean>
	
	<!-- sql会话(作用域:交易) -->
	<bean id="activitiMyBatisDaoSysDao" class="bros.common.core.db.impl.MyBatisDaoSysDaoImpl">
		<property name="sqlSessionTemplate" ref="activitiSessionTemplate" />
		<property name="jdbcType" value="${sys.jdbc.activiti.type}"/>  
	</bean>

	<!--======= 事务配置 Begin ================= -->
	<!-- 事务管理器（由Spring管理MyBatis的事务） -->
	<bean id="activitiTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 关联数据源 -->
		<property name="dataSource" ref="activitiDataSource"></property>
	</bean>
	<!-- 注解事务 -->
	<tx:annotation-driven transaction-manager="activitiTransactionManager" />
	<!--======= 事务配置 End =================== -->
	
	
	<!-- 工作流引擎配置bean -->
	<bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
		<!-- 数据源 -->
		<property name="dataSource" ref="activitiDataSource" />
		<!-- 使用spring事务管理器 -->
		<property name="transactionManager" ref="activitiTransactionManager" />
		<!-- 数据库策略 -->
		<property name="databaseSchemaUpdate" value="false" />
		<!-- activiti的定时任务关闭 -->
		<property name="jobExecutorActivate" value="false" />
		<!-- 下面这两行是关于中文乱码的-->
        <property name="activityFontName" value="宋体"/>
        <property name="labelFontName" value="宋体"/>
	</bean>
	
	<!-- 流程引擎 -->
	<bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
		<property name="processEngineConfiguration" ref="processEngineConfiguration" />
	</bean>
	
	<!-- 资源服务service -->
	<bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService" />
	<!-- 流程运行service -->
	<bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService" />
	<!-- 任务管理service -->
	<bean id="taskService" factory-bean="processEngine" factory-method="getTaskService" />
	<!-- 历史管理service -->
	<bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService" />
	<!-- 用户管理service -->
	<bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService" />
	<!-- 引擎管理service -->
	<bean id="managementService" factory-bean="processEngine" factory-method="getManagementService" />
	
</beans>